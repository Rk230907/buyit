# BuyIt - Custom eCommerce Platform

BuyIt is a full-stack custom eCommerce platform built with modern web technologies, including React, Redux, Node.js, Express, and MongoDB. It is designed to provide an end-to-end shopping experience with user authentication, product management, and seamless payment integration. This project is built in a progressive and structured manner, replicating a real-world eCommerce application.

## Table of Contents

- [Features]
- [Technologies Used]
- [Project Highlights]
- [Installation & Setup]
- [Admin Functionalities]
- [Security Features]
- [API Documentation]
- [Custom Scripts]
- [License]

## Features

BuyIt offers a variety of features commonly found in modern eCommerce applications:

1. Full-featured Shopping Cart
   - Add products to the cart, adjust quantities, and remove items.
   - Integrated PayPal and credit/debit card payment options.
2. JWT Authentication
   - Secure user authentication with JWT stored in an HTTP-only cookie for added security.
3. User Features
   - Profile management, including order history.
   - Leave product reviews and ratings.
4. Product Management
   - Pagination, carousel for top products, and a search bar for easy product navigation.
5. Admin Features
   - Product, user, and order management interfaces.
   - Order detail page with the ability to mark orders as delivered.
6. Checkout Process
   - Multi-step checkout process: Shipping details, payment method, and order confirmation.
7. Custom Database Seeder Script
   - Script to seed product, user, and order data directly into MongoDB for testing and development.

## Technologies Used

This project is built using the following technologies:

- Frontend: React.js, Redux, React Router, RTX
- Backend: Node.js, Express.js, MongoDB (NoSQL database)
- Authentication: JWT (JSON Web Tokens)
- Payment Integration: PayPal REST API, Credit/Debit card payments
- Middleware: Custom middleware for error handling and async operations
- Styling: Bootstrap, custom CSS

## Project Highlights

1. Unified Dev Environment  
   Using nodemon and concurrently to run both the backend and frontend servers with a single command, streamlining the development process.

2. Custom Async Handler Middleware  
   Ensures efficient error handling for asynchronous functions across the application.

3. Color-coded Console Logs  
   Utilizing the colors package to visually differentiate key tags and events in the console for better debugging and tracking.

4. Database Management Scripts

   - Import and destroy data into MongoDB in bulk via custom scripts directly from VS Code.

5. Secure Authentication  
   JWT tokens are stored in HTTP-Only cookies for enhanced security, mitigating XSS (Cross-Site Scripting) risks.

6. Redux Toolkit & API Slice  
   API requests are efficiently managed with createApiSlice in Redux, centralizing state management and data fetching.

7. Encrypted Passwords  
   User passwords are encrypted using bcrypt in the user model before being saved to the database.

8. Custom Error Handler  
   A global error handler ensures proper error propagation and response formatting across the application.

9. Postman Collection  
   A comprehensive collection of all API routes is provided to facilitate testing and API documentation.

10. PayPal Integration  
    Payments are handled through @paypal/react-paypal-js, allowing seamless PayPal and credit card transactions.

11. SEO & Metadata  
    Each page is equipped with custom meta tags using the Helmet library to enhance SEO and page-level information.

## Installation & Setup

To set up this project locally, follow these steps:

1. Clone the repository:
   git clone https://github.com/Rk230907/buyit.git
   cd buyit

2. Install dependencies:

   - Backend:
     npm install

   - Frontend:
     cd frontend
     npm install

3. Create a `.env` file in the root of the `backend` folder and add the following:
   NODE_ENV=development
   PORT=5000
   MONGO_URI=your_mongodb_uri
   JWT_SECRET=your_jwt_secret
   PAYPAL_CLIENT_ID=your_paypal_client_id

4. Run the application in development mode:
   npm run dev

5. The app should now be running at:
   - Frontend: http://localhost:3000
   - Backend: http://localhost:5000

## Admin Functionalities

The application includes a robust admin panel for managing key business processes:

- Product Management: Create, update, and delete products.
- User Management: View user details, delete users, and manage roles.
- Order Management: View order details, update order status (mark as delivered), and track payments.

## Security Features

1. JWT Authentication  
   Authenticated routes are protected using JWT tokens, ensuring only authorized users can access certain pages and perform actions.

2. HTTP-Only Cookies  
   JWT tokens are stored in HTTP-Only cookies, making them inaccessible via JavaScript and preventing cross-site scripting (XSS) attacks.

3. Auth Middleware  
   Custom middleware is used to protect routes and ensure that only users with the correct privileges can access admin areas and perform specific actions.

4. Password Encryption  
   Passwords are encrypted with bcrypt and verified during login through a custom password comparison method on the user schema.

## API Documentation

A complete Postman collection is provided to test and document the APIs used within the application. You can find the Postman collection in the `postman/` directory of the repository.

## Custom Scripts

The project includes custom scripts for importing and removing data from MongoDB, ideal for development and testing:

- Import Data
  npm run data:import
- Destroy Data
  npm run data:destroy

These scripts allow you to bulk insert or delete all data (products, users, and orders) into/from your MongoDB database.

## License

This project is open-source.

---

- Feel free to contribute and collaborate on this project.
- Contributions and collaborations are welcome!
